import pyodbc
import requests
import datetime

#print time
datetime.time(15, 8, 24)
print("Script began at: ", datetime.datetime.now().time())

#connect to server and db 
cnxn = pyodbc.connect("Driver={SQL Server};"
                        "Server=;"
                        "Database=;"
                        "Trusted_Connection=yes;")

cursor = cnxn.cursor()
    
def apiConnect(pubApi, privApi, accountId, start, end, mailingid):

    #pull in and authenticate API and convert into proper JSON format
    api = requests.get('https://api.e2ma.net/' + accountId + '/response/' + mailingid + '/opens?start=' + start + '&end=' + end, auth=(pubApi, privApi))
    api= api.json()
    
    #iterate through JSON object
    for x in api:

    #allocate parsed json value to variable, and if exception then give NULL value to variable
        try:
            storeCode = x['fields']['storecode']
        except:
            storeCode = None
            
        try:
            firstName = x['fields']['first_name']
        except:
            firstName = None

        try: 
            lastName = x['fields']['last_name']
        except:
            lastName = None

        try:
            lastInputSource = x['fields']['last-input-source']
        except: 
            lastInputSource = None

        try:
            fishbowlJoinDate = x['fields']['fishbowl-join-date'].replace("@D:","")
        except:
            fishbowlJoinDate = None

        try:
            pxOrOtJoindate = x['fields']['px-or-ot-joindate'].replace("@D:","")
        except:
            pxOrOtJoindate = None

        try:
            otSignup = x['fields']['ot-signup']
        except:
            otSignup = None
            
        try:
            pxCardNumber = x['fields']['pxcardnumber']
        except:
            pxCardNumber = None
            
        try: 
            dateLastDined = x['fields']['datelastdined'].replace("@D:","")
        except:
            dateLastDined = None
            
        try:
            birthDay = x['fields']['birthdate'].replace("@D:","")
        except:
            birthDay = None
            
        try:
            memberSince = x['member_since'].replace("@D:","")
            memberSince = memberSince.replace("T"," ")
        except:
            memberSince = None
            
        try:
            timeStamp = x['timestamp'].replace("@D:","")
            timeStamp = timeStamp.replace("T"," ")
        except:
            timeStamp = None
            
        
        #insert parsed JSON values into DB and pass params for stored procedure
        query = "exec MyemmaResponseOpens @storecode = ?, @firstname = ?, @lastname = ?, @px_or_ot_joindate = ?, @datelastdined = ?, @pxcardnumber = ?, @birthdate = ?, @fishbowl_join_date = ?, @ot_signup = ?, @last_input_source = ?, @timestamp = ?, @member_id = ?, @member_since = ?, @email_domain = ?, @email_user = ?, @email = ?, @member_status_id = ?, @mailing_id = ?"
        values = (storeCode, firstName, lastName, pxOrOtJoindate, dateLastDined, pxCardNumber, birthDay, fishbowlJoinDate, otSignup, lastInputSource, timeStamp, x['member_id'], memberSince, x['email_domain'], x['email_user'], x['email'], x['member_status_id'], mailingid)
        cursor.execute(query, values)            
        cnxn.commit()


#new function which passes params and calls other function for each store/brand with the necessary exception handle in place
def funcCall(start, end):
    
    arr = ['266177556', '266181652', '266182676', '266183700', '266184724', '266185748', '266186772', '266187796', '266188820', '266189844', '266200084', '266201108', '266202132', '266203156', '266204180', '266206228', '266231828', '266232852', '266235924', '266258452', '266260500', '266263572', '266264596', '266266644', '266272788', '266273812', '266278932', '266279956', '266280980', '266282004', '266284052', '266319892', '266328084', '266329108', '266330132', '266331156', '266332180', '266385428', '266386452', '266387476', '266389524', '266390548', '266442772', '266473492', '266480660', '266498068', '266684436', '266685460', '266686484', '266687508', '266688532', '266689556', '266690580', '266691604', '266692628', '266823700', '266824724', '267005972', '267006996', '267008020', '267009044', '267032596', '267048980', '267050004', '267062292', '267063316', '267065364', '267213844', '267214868', '267215892', '267216916', '267217940', '267298836', '267299860', '267300884', '267301908', '267316244', '267318292', '267319316', '267320340', '267333652', '267334676', '267335700', '267336724', '267337748', '267543572', '267558932', '267564052', '267565076', '267566100', '267567124', '267672596', '267673620', '267697172', '267700244', '267701268', '267823124', '267824148', '267825172', '267826196', '267827220', '267829268', '267831316', '267843604', '267845652', '267846676', '267847700', '267848724', '267853844', '267854868', '267855892', '267856916', '267857940', '267858964', '267859988', '267861012', '267862036', '267863060', '267865108', '267866132', '267867156', '267868180', '267870228', '267871252', '269262868', '269263892', '269265940', '269266964', '269267988', '269269012', '269270036', '269281300', '269282324', '269283348', '269284372', '269286420', '269287444', '269288468', '269290516', '269292564', '269295636', '269296660', '269297684', '269298708', '269299732', '269323284', '269324308', '269325332', '269326356', '269327380', '269962260', '269963284', '269964308', '269965332', '269966356', '269967380', '269968404', '269970452', '269971476', '269972500', '269973524', '269974548', '269975572', '269976596', '269977620', '269986836', '269992980', '269997076', '269998100', '269999124', '270595092', '270596116', '270667796', '270668820', '270670868', '270671892', '270703636', '270704660', '270708756', '270751764', '270756884', '270757908', '270758932', '270759956', '270861332', '270862356', '270863380', '270864404', '270941204', '271033364', '271098900', '271100948', '271119380', '271120404', '271121428', '271122452', '271123476', '271124500', '271126548', '271127572', '271128596', '271129620', '271130644', '271131668', '271132692', '271164436', '271167508', '271172628', '271173652', '271174676', '271175700', '271176724', '271299604', '271300628', '271303700', '271365140', '271367188', '271368212', '271436820', '271437844', '271439892', '271440916', '271441940', '271442964', '271443988', '271445012', '271532052', '271533076', '271534100', '271535124', '271536148', '271537172', '271538196', '271539220', '271540244', '271616020', '271617044', '271618068', '271619092', '271624212', '271669268', '271670292', '271711252', '271712276', '271713300', '271714324', '271715348', '271717396', '271718420', '271719444', '271720468', '271721492', '271761428', '272132116', '272139284', '272140308', '272146452', '272147476', '272148500', '272232468', '272268308', '272269332', '272270356', '272271380', '272272404', '272273428', '272274452', '272275476', '272371732', '272372756', '272373780', '272374804', '272375828', '272376852', '272377876', '272378900', '272380948', '272390164', '272392212', '272393236', '272394260', '272395284', '272693268', '272696340', '272783380', '272784404', '272785428', '272786452', '272787476', '273088532', '273089556', '273090580', '273091604', '273093652', '273095700', '273096724', '273097748', '273098772', '273099796', '273103892', '273104916', '273105940', '273106964', '273107988', '273139732', '273140756', '273141780', '273142804', '273143828', '273216532', '273217556', '273218580', '273219604', '273220628', '273221652', '273222676', '273223700', '273224724', '273239060', '273240084', '273241108', '273242132', '273243156', '273274900', '273275924', '273276948', '273277972', '273278996', '273280020', '273281044', '273282068', '273283092', '273284116', '273285140', '273286164', '273299476', '273300500', '273301524', '273302548', '273308692', '273381396', '273383444', '273384468', '273385492', '273388564', '273389588', '273390612', '273391636', '273392660', '273393684', '273394708', '273395732', '273396756', '273397780', '273398804', '273403924', '273404948', '273405972', '273406996', '273408020', '273593364', '273594388', '273595412', '273596436', '273597460', '273598484', '273632276', '273633300', '273634324', '273635348', '273636372', '273646612', '273647636', '273648660', '273649684', '273650708', '273700884', '273701908', '273702932', '273703956', '273704980', '273711124', '273712148', '273713172', '273714196', '273715220', '273761300', '273762324', '273763348', '273764372', '273765396', '273769492', '273770516', '273771540', '273773588', '273774612', '273777684', '273778708', '273779732', '273780756', '273781780', '273782804', '273848340', '273849364', '273850388', '273851412', '273852436', '273888276', '273889300', '273892372', '273893396', '273894420', '274159636', '274160660', '274161684', '274162708', '274163732', '274164756', '274165780', '274196500', '274197524', '274198548', '274199572', '274200596', '274210836', '274211860', '274212884', '274213908', '274214932', '274215956', '274221076', '274222100', '274223124', '274224148', '274723860', '274724884', '274725908', '274726932', '274727956', '274728980', '274731028', '274732052', '274733076', '274734100', '274737172', '274738196', '274739220', '274740244', '274741268', '274742292', '274834452', '274835476', '274836500', '274837524', '274838548', '274853908', '274854932', '274855956', '274856980', '274858004', '275163156', '275164180', '275165204', '275166228', '275167252', '275172372', '275173396', '275174420', '275175444', '275176468', '275215380', '275216404', '275217428', '275218452', '275219476', '275220500', '275221524', '275222548', '275223572', '275301396', '275302420', '275303444', '275304468', '275305492', '275483668', '275484692', '275490836', '275491860', '275492884', '275493908', '275494932', '275495956', '275498004', '275500052', '275501076', '275505172', '275506196', '275507220', '275508244', '275543060', '275544084', '275545108', '275546132', '275547156', '275548180', '275549204', '275550228', '275551252', '275552276', '275553300', '275554324', '275555348', '275556372', '275557396', '275558420', '275902484', '275903508', '275904532', '275905556', '275907604', '275908628', '275909652', '275910676', '275918868', '275919892', '275920916', '275921940', '275922964', '275923988', '275925012', '275926036', '275927060', '275928084', '275929108', '275930132', '275931156', '275932180', '275933204', '276225044', '276226068', '276227092', '276228116', '276229140', '276230164', '276231188', '276232212', '276233236', '276234260', '276235284', '276236308', '276237332', '276238356', '276239380', '276240404', '276241428', '276242452', '276243476', '276244500', '276245524', '276246548', '276247572', '276248596', '276249620', '276250644', '276251668', '276252692', '276453396', '276454420', '276455444', '276456468', '276457492', '276459540', '276460564', '276461588', '276462612', '276463636', '276464660', '276465684', '276466708', '276467732', '276669460', '276670484', '276671508', '276672532', '276673556', '276674580', '276675604', '276676628', '276677652', '276678676', '276809748', '276810772', '276811796', '276812820', '276813844', '276814868', '276815892', '276816916', '276817940', '276818964', '276819988', '276821012', '277277716', '277278740', '277279764', '277280788', '277281812', '277282836', '277283860', '277284884', '277285908', '277286932', '277287956', '277288980', '277290004', '277291028', '277292052', '277467156', '277468180', '277514260', '277515284', '277516308', '277517332', '277518356', '277519380', '277520404', '277521428', '277522452', '277523476', '277524500', '277525524', '277527572', '277528596', '277529620', '277617684', '277618708', '277619732', '277620756', '277621780', '277622804', '277623828', '277624852', '277625876', '277626900', '278414356', '278415380', '278416404', '278417428', '278418452', '278419476', '278420500', '278421524', '278422548', '278423572', '278424596', '278425620', '278426644', '278427668', '278428692', '278429716', '278430740', '278431764', '278432788', '278433812', '278434836', '278526996', '278528020', '278529044', '278530068', '278531092', '278534164', '278535188', '278536212', '278561812', '278562836', '278663188', '279643156', '279644180', '279645204', '279947284', '279948308', '279949332', '279950356', '279951380', '280014868', '280015892', '280016916', '280017940', '280018964', '280019988', '280021012', '280022036', '280023060', '280024084', '280025108', '280026132', '280027156', '280028180', '280286228', '280287252', '280288276', '280289300', '280290324', '280291348', '280292372', '280293396', '280387604', '280388628', '280389652', '280390676', '280391700', '280392724', '280393748', '280394772', '280395796', '280860692', '280861716', '280862740', '280863764', '280864788', '280867860', '280868884', '280869908', '280870932', '280871956', '280872980', '280874004', '281434132', '281435156', '281436180', '281437204', '281468948', '281501716', '281502740', '281503764', '281504788']
    
    for j in arr:

        try:
            apiConnect('', '', '', start, end, j)
        except Exception as e:
            print("Error Message: ", e)    
    
    
    arr = ['18737177', '18738201', '18740249', '18750489', '18751513', '18752537', '18756633', '18757657', '18758681', '18759705', '18760729', '18761753', '18762777', '18763801', '18770969', '18771993', '18773017', '18784281', '18785305', '18786329', '18787353', '18788377', '18789401', '18790425', '18822169', '18823193', '18880537', '18881561', '18882585', '18883609', '18896921', '18899993', '18901017', '18902041', '18908185', '18976793', '18977817', '18978841', '18984985', '18986009', '18988057', '18990105', '19002393', '19019801', '19020825', '19021849', '19022873', '19023897', '19024921', '19025945', '19026969', '19027993', '19042329', '19045401', '19085337', '19086361', '19087385', '19088409', '19090457', '19091481', '19103769', '19136537', '19137561', '19138585', '19184665', '19185689', '19186713', '19187737', '19188761', '19189785', '19201049', '19202073', '19203097', '19204121', '19234841', '19235865', '19236889', '19237913', '19238937', '19286041', '19287065', '19288089', '19289113', '19290137', '19314713', '19315737', '19316761', '19317785', '19318809', '19319833', '19320857', '19321881', '19322905', '19323929', '19324953', '19325977', '19327001', '19328025', '19329049', '19330073', '19331097', '19332121', '19333145', '19334169', '19335193', '19336217', '19337241', '19368985', '19370009', '19405849', '19406873', '19407897', '19408921', '19409945', '19414041', '19415065', '19416089', '19417113', '19430425', '19433497', '19434521', '19435545', '19436569', '19437593', '19438617', '19439641', '19440665', '19441689', '19442713', '19443737', '19626009', '19627033', '19628057', '19641369', '19648537', '19649561', '19650585', '19654681', '19656729', '19682329', '19683353', '19684377', '19685401', '19686425', '19705881', '19706905', '19707929', '19708953', '19779609', '19780633', '19781657', '19782681', '19783705', '19784729', '19785753', '19786777', '19787801', '19788825', '19789849', '19790873', '19791897', '19832857', '19833881', '19958809', '19959833', '20005913', '20027417', '20028441', '20083737', '20084761', '20085785', '20086809', '20161561', '20189209', '20205593', '20206617', '20207641', '20208665', '20209689', '20210713', '20211737', '20212761', '20213785', '20214809', '20215833', '20246553', '20247577', '20248601', '20249625', '20346905', '20347929', '20348953', '20349977', '20351001', '20410393', '20411417', '20412441', '20413465', '20414489', '20415513', '20416537', '20424729', '20425753', '20451353', '20452377', '20453401', '20454425', '20466713', '20467737', '20468761', '20469785', '20472857', '20511769', '20512793', '20513817', '20514841', '20515865', '20516889', '20517913', '20518937', '20530201', '20535321', '20536345', '20538393', '20539417', '20540441', '20541465', '20542489', '20543513', '20544537', '20545561', '20919321', '20920345', '20921369', '20967449', '20968473', '20969497', '20970521', '20971545', '20972569', '20979737', '20980761', '20981785', '20982809', '21410841', '21411865', '21413913', '21414937', '21440537', '21441561', '21442585', '21443609', '21444633', '21778457', '21779481', '21780505', '21781529', '21782553', '21783577', '21784601', '21785625', '21789721', '21790745', '21791769', '21792793', '21793817', '21819417', '21820441', '21821465', '21822489', '21824537', '21825561', '21826585', '21827609', '21828633', '21829657', '21856281', '21857305', '21858329', '21859353', '21860377', '21865497', '21866521', '21867545', '21884953', '21885977', '21890073', '21891097', '21923865', '21925913', '21926937', '21927961', '21928985', '21932057', '21933081', '21934105', '21935129', '22133785', '22134809', '22170649', '22171673', '22173721', '22174745', '22175769', '22176793', '22186009', '22188057', '22189081', '22190105', '22191129', '22251545', '22252569', '22253593', '22254617', '22262809', '22263833', '22264857', '22265881', '22266905', '22267929', '22268953', '22269977', '22271001', '22320153', '22321177', '22322201', '22361113', '22362137', '22363161', '22364185', '22365209', '22366233', '22368281', '22369305', '22370329', '22372377', '22373401', '22374425', '22375449', '22393881', '22394905', '22395929', '22396953', '22397977', '22399001', '22403097', '22404121', '22405145', '22406169', '22407193', '22408217', '22411289', '22412313', '22413337', '22758425', '22759449', '22760473', '22761497', '22762521', '22763545', '22764569', '22765593', '22766617', '22767641', '22768665', '22769689', '22770713', '22771737', '22772761', '22799385', '22800409', '22801433', '22802457', '22811673', '22812697', '22813721', '22814745', '22828057', '22831129', '22832153', '22833177', '22834201', '22836249', '22837273', '22838297', '22839321', '22927385', '22928409', '22932505', '22933529', '22938649', '22940697', '22941721', '23001113', '23002137', '23214105', '23215129', '23216153', '23217177', '23219225', '23222297', '23235609', '23236633', '23237657', '23238681', '23239705', '23240729', '23241753', '23242777', '23243801', '23244825', '23245849', '23246873', '23247897', '23248921', '23249945', '23250969', '23251993', '23253017', '23254041', '23302169', '23311385', '23312409', '23313433', '23314457', '23315481', '23317529', '23318553', '23645209', '23646233', '23647257', '23648281', '23649305', '23650329', '23651353', '23652377', '23653401', '23715865', '23716889', '23717913', '23718937', '23719961', '23720985', '23722009', '23726105', '23727129', '23728153', '23729177', '23730201', '23731225', '23732249', '23733273', '23734297', '23810073', '23811097', '23879705', '23880729', '23881753', '23907353', '23908377', '23909401', '24042521', '24043545', '24044569', '24045593', '24046617', '24047641', '24312857', '24313881', '24314905', '24315929', '24316953', '24317977', '24319001', '24320025', '24381465', '24382489', '24383513', '24384537', '24385561', '24386585', '24387609', '24388633', '24389657', '24390681', '24392729', '24393753', '24394777', '24515609', '24516633', '24517657', '24518681', '24519705', '24520729', '24521753', '24522777', '24523801', '24524825', '24525849', '24526873', '24527897', '24528921', '24529945', '25157657', '25225241', '25226265', '25227289', '25228313', '25229337', '25934873', '25935897', '25936921', '25937945', '25938969', '25939993', '25941017', '25942041', '26070041', '26071065', '26072089', '26073113', '26074137', '26075161', '26076185', '26077209', '26205209', '26206233', '26207257', '26208281', '26914841', '26915865', '26917913', '26918937', '26949657', '26950681', '27151385']
    
    for j in arr:

        try:
            apiConnect('', '', '', start, end, j)
        except Exception as e:
            print("Error Message: ", e)   

#function call
funcCall('0','500')
funcCall('500','1000')
funcCall('1000','1500')
funcCall('1500','2000')
funcCall('2000','2500')
funcCall('2500','3000')
funcCall('3000','3500')
funcCall('3500','4000')
funcCall('4000','4500')
funcCall('4500','5000')
funcCall('5000','5500')
funcCall('5500','6000')
funcCall('6000','6500')
funcCall('6500','7000')
funcCall('7000','7500')
funcCall('7500','8000')
funcCall('8000','8500')
funcCall('8500','9000')
funcCall('9000','9500')
funcCall('9500','10000')


#print time
print("Script finished running at: ", datetime.datetime.now().time())