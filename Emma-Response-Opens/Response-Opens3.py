import pyodbc
import requests
import datetime

#print time
datetime.time(15, 8, 24)
print("Script began at: ", datetime.datetime.now().time())

#connect to server and db 
cnxn = pyodbc.connect("Driver={SQL Server};"
                        "Server=;"
                        "Database=;"
                        "Trusted_Connection=yes;")

cursor = cnxn.cursor()
    
def apiConnect(pubApi, privApi, accountId, start, end, mailingid):

    #pull in and authenticate API and convert into proper JSON format
    api = requests.get('https://api.e2ma.net/' + accountId + '/response/' + mailingid + '/opens?start=' + start + '&end=' + end, auth=(pubApi, privApi))
    api= api.json()
    
    #iterate through JSON object
    for x in api:

    #allocate parsed json value to variable, and if exception then give NULL value to variable
        try:
            storeCode = x['fields']['storecode']
        except:
            storeCode = None
            
        try:
            firstName = x['fields']['first_name']
        except:
            firstName = None

        try: 
            lastName = x['fields']['last_name']
        except:
            lastName = None

        try:
            lastInputSource = x['fields']['last-input-source']
        except: 
            lastInputSource = None

        try:
            fishbowlJoinDate = x['fields']['fishbowl-join-date'].replace("@D:","")
        except:
            fishbowlJoinDate = None

        try:
            pxOrOtJoindate = x['fields']['px-or-ot-joindate'].replace("@D:","")
        except:
            pxOrOtJoindate = None

        try:
            otSignup = x['fields']['ot-signup']
        except:
            otSignup = None
            
        try:
            pxCardNumber = x['fields']['pxcardnumber']
        except:
            pxCardNumber = None
            
        try: 
            dateLastDined = x['fields']['datelastdined'].replace("@D:","")
        except:
            dateLastDined = None
            
        try:
            birthDay = x['fields']['birthdate'].replace("@D:","")
        except:
            birthDay = None
            
        try:
            memberSince = x['member_since'].replace("@D:","")
            memberSince = memberSince.replace("T"," ")
        except:
            memberSince = None
            
        try:
            timeStamp = x['timestamp'].replace("@D:","")
            timeStamp = timeStamp.replace("T"," ")
        except:
            timeStamp = None
            
        
        #insert parsed JSON values into DB and pass params for stored procedure
        query = "exec MyemmaResponseOpens @storecode = ?, @firstname = ?, @lastname = ?, @px_or_ot_joindate = ?, @datelastdined = ?, @pxcardnumber = ?, @birthdate = ?, @fishbowl_join_date = ?, @ot_signup = ?, @last_input_source = ?, @timestamp = ?, @member_id = ?, @member_since = ?, @email_domain = ?, @email_user = ?, @email = ?, @member_status_id = ?, @mailing_id = ?"
        values = (storeCode, firstName, lastName, pxOrOtJoindate, dateLastDined, pxCardNumber, birthDay, fishbowlJoinDate, otSignup, lastInputSource, timeStamp, x['member_id'], memberSince, x['email_domain'], x['email_user'], x['email'], x['member_status_id'], mailingid)
        cursor.execute(query, values)            
        cnxn.commit()


#new function which passes params and calls other function for each store/brand with the necessary exception handle in place
def funcCall(start, end):
    
    arr = ['34399264', '34426912', '34427936', '34428960', '34429984', '34431008', '34432032', '34433056', '34434080', '34438176', '34512928', '34513952', '34514976', '34516000', '34517024', '34518048', '34519072', '34520096', '34521120', '34522144', '34533408', '34534432', '34535456', '34536480', '34537504', '34538528', '34539552', '34540576', '34541600', '34542624', '34543648', '34544672', '34545696', '34546720', '34547744', '34548768', '34555936', '34556960', '34557984', '34559008', '34560032', '34561056', '34562080', '34563104', '34564128', '34565152', '34566176', '34567200', '34588704', '34633760', '34634784', '34644000', '34645024', '34646048', '34647072', '34648096', '34649120', '34650144', '34661408', '34662432', '34663456', '34687008', '34688032', '34689056', '34690080', '34691104', '34692128', '34693152', '34694176', '34695200', '34703392', '34704416', '34705440', '34706464', '34707488', '34708512', '34709536', '34710560', '34744352', '34745376', '34747424', '34748448', '34750496', '34751520', '34752544', '34753568', '34754592', '34755616', '34756640', '34757664', '34758688', '34759712', '34760736', '34761760', '34840608', '34841632', '34842656', '34843680', '34844704', '34845728', '34846752', '34847776', '34864160', '34866208', '34870304', '34873376', '34874400', '34876448', '34877472', '34878496', '34879520', '34880544', '34881568', '34882592', '34883616', '34884640', '34885664', '34897952', '34898976', '34900000', '34908192', '34909216', '34910240', '34911264', '34912288', '34913312', '34914336', '34915360', '34916384', '34917408', '34918432', '34919456', '34920480', '34921504', '34922528', '34923552', '35124256', '35125280', '35126304', '35127328', '35128352', '35129376', '35130400', '35131424', '35144736', '35145760', '35146784', '35147808', '35148832', '35149856', '35150880', '35151904', '35156000', '35163168', '35164192', '35165216', '35166240', '35167264', '35168288', '35169312', '35170336', '35171360', '35172384', '35173408', '35174432', '35175456', '35176480', '35177504', '35178528', '35188768', '35189792', '35190816', '35191840', '35192864', '35193888', '35194912', '35218464', '35219488', '35220512', '35221536', '35222560', '35223584', '35224608', '35225632', '35255328', '35256352', '35257376', '35258400', '35259424', '35260448', '35261472', '35262496', '35306528', '35309600', '35310624', '35311648', '35312672', '35313696', '35315744', '35316768', '35343392', '35344416', '35345440', '35346464', '35347488', '35348512', '35349536', '35439648', '35440672', '35442720', '35444768', '35445792', '35446816', '35447840', '35448864', '35503136', '35504160', '35505184', '35506208', '35507232', '35508256', '35509280', '35510304', '35511328', '35581984', '35592224', '35593248', '35594272', '35595296', '35596320', '35597344', '35598368', '35600416', '35601440', '35604512', '35605536', '35606560', '35607584', '35608608', '35609632', '35610656', '35611680', '35612704', '35649568', '35650592', '35653664', '35706912', '35707936', '35708960', '35709984', '35711008', '35712032', '35713056', '35714080', '35715104', '35716128', '35717152', '35718176', '35719200', '35720224', '35755040', '35756064', '35757088', '35758112', '35759136', '35760160', '35761184', '35762208', '35763232', '35770400', '35771424', '35772448', '35773472', '35774496', '35775520', '35776544', '35777568', '35792928', '35793952', '35794976', '35796000', '35797024', '35798048', '35799072', '35800096', '35801120', '35802144', '35803168', '35804192', '35805216', '35806240', '35807264', '35808288', '35809312', '35810336', '35813408', '35814432', '35815456', '35816480', '35817504', '35818528', '35819552', '35820576', '35821600', '35840032', '35841056', '35842080', '35843104', '35844128', '35845152', '35846176', '35847200', '35848224', '35849248', '35907616', '35908640', '35909664', '35911712', '35912736', '35913760', '35914784', '35915808', '35916832', '35917856', '35919904', '35928096', '35929120', '35930144', '35931168', '35932192', '35933216', '35934240', '35935264', '35936288', '35937312', '35938336', '35939360', '35940384', '35941408', '35942432', '35943456', '35944480', '35945504', '35947552', '35948576', '35949600', '35950624', '35951648', '35952672', '35953696', '35954720', '35955744', '35956768', '35957792', '35958816', '35959840', '35960864', '35961888', '35962912', '35963936', '36000800', '36001824', '36002848', '36003872', '36004896', '36005920', '36006944', '36007968', '36008992', '36015136', '36016160', '36017184', '36018208', '36019232', '36020256', '36021280', '36022304', '36067360', '36068384', '36069408', '36070432', '36071456', '36072480', '36073504', '36074528', '36075552', '36076576', '36077600', '36078624', '36079648', '36080672', '36081696', '36082720', '36083744', '36118560', '36119584', '36120608', '36121632', '36122656', '36123680', '36124704', '36125728', '36126752', '36127776', '36128800', '36129824', '36130848', '36131872', '36132896', '36133920', '36134944', '36135968', '36136992', '36138016', '36149280', '36150304', '36151328', '36152352', '36153376', '36154400', '36164640', '36166688', '36178976', '36180000', '36181024', '36182048', '36183072', '36184096', '36185120', '36191264', '36192288', '36193312', '36194336', '36195360', '36196384', '36197408', '36206624', '36207648', '36208672', '36209696', '36210720', '36211744', '36212768', '36213792', '36214816', '36215840', '36216864', '36217888', '36219936', '36229152', '36230176', '36231200', '36232224', '36233248', '36234272', '36235296', '36236320', '36237344', '36294688', '36295712', '36301856', '36302880', '36308000', '36309024', '36310048', '36311072', '36312096', '36313120', '36314144', '36315168', '36316192', '36317216', '36318240', '36323360', '36324384', '36330528', '36331552', '36332576', '36333600', '36334624', '36335648', '36336672', '36337696', '36338720', '36343840', '36344864', '36345888', '36346912', '36347936', '36348960', '36349984', '36351008', '36352032', '36355104', '36356128', '36357152', '36358176', '36359200', '36360224', '36361248', '36362272', '36363296', '36364320', '36365344', '36366368', '36367392', '36368416', '36369440', '36370464', '36371488', '36385824', '36386848', '36387872', '36388896', '36389920', '36390944', '36391968', '36392992', '36394016', '36395040', '36396064', '36397088', '36398112', '36399136', '36400160', '36401184', '36404256', '36405280', '36410400', '36411424', '36423712', '36424736', '36425760', '36426784', '36427808', '36428832', '36429856', '36430880', '36431904', '36432928', '36433952', '36434976', '36436000', '36437024', '36438048', '36439072', '36440096', '36441120', '36442144', '36444192', '36445216', '36487200', '36488224', '36489248', '36490272', '36491296', '36492320', '36493344', '36494368', '36495392', '36496416', '36497440', '36498464', '36499488', '36500512', '36501536', '36502560', '36503584', '36504608', '36505632', '36506656', '36507680', '36508704', '36509728', '36510752', '36511776', '36512800', '36513824', '36525088', '36526112', '36527136', '36528160', '36529184', '36530208', '36531232', '36532256', '36533280', '36534304', '36535328', '36536352', '36557856', '36558880', '36559904', '36560928', '36561952', '36562976', '36564000', '36565024', '36566048', '36567072', '36568096', '36571168', '36572192', '36659232', '36660256', '36661280', '36662304', '36663328', '36664352', '36665376', '36666400', '36667424', '36668448', '36669472', '36670496', '36671520', '36672544', '36673568', '36674592', '36675616', '36676640', '36677664', '36678688', '36679712', '36680736', '36681760', '36682784', '36683808', '36684832', '36685856', '36686880', '36687904', '36688928', '36689952', '36690976', '36692000', '36693024', '36772896', '36773920', '36774944', '36775968', '36776992', '36778016', '36779040', '36780064', '36781088', '36782112', '36783136', '36784160', '36785184', '36786208', '36787232', '36788256', '36789280', '36790304', '36791328', '36792352', '36793376', '37133344', '37134368', '37136416', '37137440', '37138464', '37139488', '37140512', '37141536', '37142560', '37143584', '37144608', '37145632', '37146656', '37147680', '37148704', '37149728', '37150752', '37151776', '37152800', '37153824', '37154848', '37155872', '37156896', '37157920', '37158944', '37159968', '37160992', '37162016', '37163040', '37164064', '37165088', '37166112', '37167136', '37168160', '37278752', '37279776', '37280800', '37281824', '37282848', '37283872', '37284896', '37285920', '37286944', '37287968', '37288992', '37290016', '37292064', '37293088', '37294112', '37295136', '37296160', '37297184', '37300256', '37301280', '37302304', '37303328', '37964832', '37965856', '37966880', '37967904', '37969952', '37970976', '37972000', '37973024', '37974048', '37976096', '37977120', '37978144', '37979168', '37980192', '37981216', '37982240', '38200352', '38201376', '38202400', '38203424', '38204448', '38205472', '38206496', '38207520', '38208544', '38209568', '38210592', '38211616', '38212640', '38213664', '38214688', '38215712', '38216736', '38217760', '38218784', '38219808', '38220832', '38221856', '38222880', '38223904', '38224928', '38225952', '38383648', '38384672', '38385696', '38386720', '38387744', '38388768', '38389792', '38390816', '38391840', '38392864', '38393888', '38394912', '38395936', '38396960', '38397984', '38399008', '38559776', '38560800', '38958112', '38959136', '39120928', '39121952', '39122976', '39124000', '39125024', '39126048', '39127072', '39128096', '39129120', '40073248', '40074272', '40075296', '40076320', '40077344', '40078368', '40079392', '40080416', '40081440', '40082464', '40083488', '40084512', '40085536', '40086560', '40087584', '40088608', '40141856', '40242208', '40243232', '40244256', '40245280', '40246304', '40247328', '40248352', '40249376', '40250400', '40251424', '40252448', '40253472', '40254496', '40255520', '40256544', '40257568', '40259616', '40260640', '40261664', '40262688', '40263712', '40264736', '40265760', '40266784', '40267808', '40268832', '40269856', '40270880', '40271904', '40272928', '40273952']
    
    for j in arr:

        try:
            apiConnect('', '', '', start, end, j)
        except Exception as e:
            print("Error Message: ", e)    
    
    arr = ['40274976', '40276000', '40277024', '40278048', '40279072', '40280096', '40281120', '40282144', '40283168', '40284192', '40285216', '40286240', '40287264', '40288288', '40289312', '40290336', '40291360', '40292384', '40293408', '40295456', '40296480', '40297504', '40298528', '40299552', '40300576', '40301600', '40302624', '40303648', '40444960', '40445984', '40447008', '40448032', '40449056', '40450080', '40451104', '40452128', '40453152', '40454176', '40455200', '40456224', '40457248', '40458272', '40459296', '40460320', '40951840', '40952864', '40953888', '40954912', '40955936', '40956960', '40957984', '40959008', '40985632', '40986656', '40987680', '40988704', '40989728', '40992800', '40993824', '40994848']
    
    for j in arr:

        try:
            apiConnect('', '', '', start, end, j)
        except Exception as e:
            print("Error Message: ", e)    
            
            
#function call
funcCall('0','500')
funcCall('500','1000')
funcCall('1000','1500')
funcCall('1500','2000')
funcCall('2000','2500')
funcCall('2500','3000')
funcCall('3000','3500')
funcCall('3500','4000')
funcCall('4000','4500')
funcCall('4500','5000')
funcCall('5000','5500')
funcCall('5500','6000')
funcCall('6000','6500')
funcCall('6500','7000')
funcCall('7000','7500')
funcCall('7500','8000')
funcCall('8000','8500')
funcCall('8500','9000')
funcCall('9000','9500')
funcCall('9500','10000')


#print time
print("Script finished running at: ", datetime.datetime.now().time())